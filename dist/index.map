{"version":3,"sources":["../nexrad/constants.js","../nexrad/classes/RandomAccessFile.js","../nexrad/classes/Level2Parser.js","../nexrad/classes/Level2Record.js","../nexrad/index.js","index.js"],"names":["BIG_ENDIAN","LITTLE_ENDIAN","FILE_HEADER_SIZE","RADAR_DATA_SIZE","CTM_HEADER_SIZE","MESSAGE_HEADER_SIZE","module","exports","fs","require","RandomAccessFile","constructor","file","offset","buffer","bigEndian","Promise","resolve","loadFile","then","data","Buffer","from","getLength","length","readFile","error","seek","byte","endianOrder","endian","readString","bytes","toString","readFloat","float","readFloatBE","readFloatLE","readInt","int","readIntBE","readIntLE","readShort","short","readByte","read","slice","skip","Level2Parser","raf","dbp","_raf","_dbp","_record_offset","setRaf","setDataBlockPointer","setRecordOffset","getDataBlockByte","getDataBlockInt","getDataBlockBytes","size","getDataBlockShort","getDataBlockFloat","getDataBlockString","Level2Record","record","message31_offset","finished","_getRecord","_parseVolumeData","data_block_pointer","parser","block_type","name","version_major","version_miner","latitude","longitude","elevation","feedhorn_height","calibration","tx_horizontal","tx_vertical","differential_reflectivity","volume_coverage_pattern","volume","_parseElevationData","atmos","_parseRadialData","unambiguous_range","horizontal_noise_level","vertical_noise_level","nyquist_velocity","radial","_parseMomentData","type","gate_count","first_gate","gate_size","rf_threshold","snr_threshold","data_size","scale","data_offset","moment_data","i","push","reflect","velocity","spectrum","zdr","rho","message","message_size","channel","message_type","id_sequence","message_julian_date","message_mseconds","segment_count","segment_number","id","mseconds","julian_date","radial_number","azimuth","compress_idx","sp","radial_length","ars","rs","elevation_number","cut","rsbs","aim","dcount","dbp1","dbp2","dbp3","dbp4","dbp5","dbp6","dbp7","dbp8","dbp9","range","azmith_angle","radial_status","elevation_angle","reflect_first_gate","doppler_first_gate","reflect_gate_size","doppler_gate_size","reflect_gate_count","doppler_gate_count","reflect_offset","velocity_offset","width_offset","resolution","vcp","nyquist_vel","attenuation","threshold","has_reflection_data","has_doppler_data","Level2Radar","scan","parseData","setElevation","setScan","setSweep","sweep","getAzimuth","getScans","getHighresReflectivity","scans","getHighresVelocity","getHighresSpectrum","getHighresDiffReflectivity","getHighresDiffPhase","phi","getHighresCorrelationCoefficient","message_offset31","recno","r","groupAndSortScans","groups","map","sort","a","b","a_elevation","b_elevation","tf","express","app","http","Server","io","radar","fileLoading","Math","radians","degrees","PI","use","static","__dirname","get","req","res","sendFile","on","client","emit","radarData","reflectivity","scalar","mul","add","x","sin","y","cos","coords","JSON","stringify","listen","console","log"],"mappings":";AAAA,MAAMA,aAAa,CAAnB;AACA,MAAMC,gBAAgB,CAAtB;ACDA,ADEA,MCFMO,ADEAN,KCFKO,QAAQ,IAAR,CAAX,CDEyB,EAAzB;AACA,MAAMN,kBAAkB,IAAxB;AACA,MAAMC,SEJ0BK,ADCTA,QCDiB,ADCT,CDGP,EAAxB,WEJgC,ADCT;ADIvB,MAAMJ,sBAAsB,EAA5B;MELQA,ADCAL,SEDiBS,QAAQ,KFCzBT,SCDAK,ECAiB;AHOzBC,OAAOC,OAAP,GAAiB,EAAEP,UAAF,EAAcC,aAAd,EAA6BC,gBAA7B,EAA+CC,eAA/C,EAAgEC,eAAhE,EAAiFC,mBAAjF,EAAjB;ACJA,MEHQ2C,SCAqBvC,QAAQ,ODA7BuC,qBCAqB;AFE7B,MAAMA,YAAN,CAAmB;AACfrC,MEHID,UFGQuC,ACFoExC,MDE9D,ECFsE,EDExF,EAAwByC,MAAM,AEH1BxC,IFGJ,ACFgF,EDE5CG,SAAS,IAA7C,EAAmD;AAC/C,aAAKsC,IAAL,GAAYF,GAAZ;AACA,AGAR,MFJQ5C,ODIK+C,GEJY3C,CFIjB,GAAYyC,GAAZ,CEJyB,cDAzB7C,UCAiB;AFKjB,ADCR,MEN6BH,AFMvBQ,OCDO2C,SDCb,CAAuB,ICDf,GAAsBxC,KCLDX,CDKrB;AACH,ADCD,IIHQ+L,EFJmC9L,ACAvC6D,yBAAAA,GDAuC7D;MAAiBC,4BAAAA;ADQ5DkD,WAAOL,GAAP,EAAY,AEPyBxC,QAAQ,aAAR;AFQjC,ACPR,aDOa0C,IAAL,GAAYF,GAAZ;AACH,ADCDtC,AIZJ,MDEQX,ACFFkM,UJYUtL,AIZAH,IJYZ,EAAkB,EIZE,KDEhBT,ICFQ,CAAhB;AJaQ,AIZR,MDCoBE,ACDdiM,MAAMD,CJYCrL,MAAL,EIZR,CJYsB,CAAd,YGXYX;AFWhBqD,ADCI,AIZR,MAAM6I,OJYOtL,AIZAL,MJYL,EIZa,CJYC,ECDEyC,EDChB,CCDJ,AGXS,EHWgB,AGXAmJ,MAAhB,CAAuBF,GAAvB,CAAb;AHYQ,ACRR,AFSQ,AIZR,MFGMnI,AEHAsI,KAAK7L,EHWE2C,ADCArC,ICDL,CCRR,CAAmB,AEHA,CHWCmC,EDCZ,CCDA,EDCiB,KAAjB,AIZG,EAAqBkJ,IAArB,CAAX;AHYK,ACRDzL,ACHJ,MAAM0J,UDGUpH,CCHhB,CAAkB,CDGd,EAAiBgB,MAAjB,EAAyBC,gBAAzB,EAA2C;AACvC,AFSA,AGZJvD,aDGS0C,EFSE,AIbS5C,CDCRG,GHYGI,CGZf,EAAkB,CCDU,GJajB,CETP,AFSmBC,GETGgD,IEJN,IJac,CETC9D,eAAT,GAA2BD,gBAA3B,GAA8CgE,gBAApE;ADSJV,ADCQ,AGZJ,aAAKsB,IHYI5D,GCDGL,EEXZ,GHYI,AGZa,CFWrB,ADCsBD,AGZlB,EFWoB,EDChB,EAAoBO,IAApB,CAAyBC,QAAQ;ACArC,ACRA,AFSQ,AGZR,MCHAiJ,OHcKhH,AEXAiH,IAAL,GAAY,CHYCxJ,AGZb,MFWA,ADCQ,EIfRuJ,CHcsBxJ,ADCAQ,MCDtB,CDC6BC,IAAP,CAAYF,IAAZ,EAAkB,QAAlB,CAAd;ACAX,ACRG,AFSQH,AGZR,YDGG,GCHI,EDGCoC,ECHGrC,KHYK,EGZT,CAAYC,CHYX,GETL,IAAuBgC,GCHI,CDGA1B,SAAJ,EAA1B,EAA2C,OAAO,EAAE4C,UAAU;AFUzD,AGZD,aHSA,IGTKoG,SAAL,CAAe3J,IAAf,EAAqBO,IAArB,CAA0B,MAAM;AFYxCsC,ACRI,AFSC,AGZOxC,ACHhB,IAAIsL,KJUW,CAAP,EIVI,IAAZ,KHcqBxJ,GEXG,CFWpB,EAAuB,CEXX;AFYR,ACXkD,AFYrD,AGZQ,ACHb,IAAIyJ,KFG+C,CAG3C,GDQKrJ,AEbD,IFaJ,ACRO,CDQGxB,AGdA,IHcV,ACRYyC,CDQG,AGdvB,KHc4BhB,IAAL,ACRR,CAAgBH,EDQI,CCRpB,CAAP,GDQgCI,cAAjB,GAAkChD,mBAAjD;AACA,ACRH,ACHI,SAJM,CAAP,GFeK8C,IAAL,CAAUJ,IAAV,CAAeA,IAAf;ADEJ,AGZC,ACHL0J,KAAKC,OAAL,GAAe,UAASC,OAAT,EAAkB;AHezB,ACRJ,AFSApL,AIfA,WAAOoL,IHcI,CDCC,ICDIxJ,CGdCsJ,GHcN,CAAU5J,CGdC+J,EAAf,CHcI,EAAP,AGduB,GAA3B;AHeC,ADCG,AGZJpC,ACHH,CAFD,cJiBe,EGZE1F,GHYGhE,MAAL,AGZX,CHYuBU,CGZC,KHYpB;AACH,AGZG,aAAKsD,SAAL,GAAiBA,YAAY,CAA7B;AFYJpB,AEXC,ACHLyI,IAAIU,GAAJ,CAAQ,GAAR,EAAaX,OHcOnJ,CGdC+J,GHcjB,EAAsB,CGdb,CAAeC,YAAY,SAA3B,CAAb;AHeQ,ADCJ,AIfJZ,IAAIa,GAAJ,CAAQ,GAAR,EHca7J,AGdA,CAAC8J,GHcN,AGdK,CHcKtL,CGdCuL,GHcX,AGdK,CHcU,IGdI,CHcC9J,IAAL,GAAY,KAAKC,cAAjB,GAAkChD,mBAAjD;AACA,ADCJa,AGZAuJ,ACHAyC,QAAIC,IDGI7C,CFWCnH,ADCAvC,GGZT,ACHA,CHcI,ADCJ,AIfamM,CHcChK,AEXA,CHYC,GCDX,CAAeA,IAAf,EGdqB,oBAAzB;AFOAsB,AFSI,AGZA,ACHP,CAFD,YDKaiG,EHYE,EGZP,EHYWtJ,CGZCsJ,CDGCrH,GAAjB,EAAsBgB,AFSX,CAAYhD,AGZA,CAAnB,IDGJ,EAA8BqD,IFSI,cETlC,EAAkD;ADS9C,ACRA,AFSI9D,AGZP,YDGO+D,GDQG,ADCA9C,KCDK0B,CCRC,EFST,CCDG,ADCSvC,CCDC0B,ACRAU,GFSb,EAAkB,CAACtB,CCDhB,EAAP,EDCsB,CETT,CAAiBuB,AFSA7B,GETjB,CFSS,CETakD,IFSI,cET1B,EAA0C,KAAKjB,cAA/C,CAAb;ADSH,ACRG,AFSQpC,AIfhBqL,GAAGc,EAAH,CAAM,MFMMhM,MENZ,CFMmB,CENCiM,IJeIjM,IAAR,EIfc;AFOlBoD,AFSC,AGZTkG,ACHA,aJaQ,AGVCC,KAAT,EAAgB,IDGIpG,OAAOR,kBAAP,CAA0B,CAA1B,EAA6B,CAA7B,CADL;ADUfJ,ACRQc,AFSH,AGZD,ACHJ4I,SJWW,CAAP,CIXGD,EDGE3C,ACHT,CAAU,IFMIlG,ECHV,CAAaoG,CFWC5H,EGdlB,CFMqBgB,CDQrB,AEXI,ACHkBnD,EHcEgD,IAAxB,EAA8B,AGdA,SFMhB,CAA0B,CAA1B,EAA6B,CAA7B,CAFC;ADWX,ACRIA,AFSP,AGZA,ACHGyJ,aHcKlK,EGdEmK,EHcP,CAAU3L,ACRA4C,CENV,CAAY,EHcZ,CAAe,ECREV,GDQGT,IAAL,CGdf,EHc2B,AGdA,IAA3B,CHcgCC,ECRtB,CAAyB,CAAzB,CAHC,SDWI,GAAkChD,mBAAjD;AACA,ACRIqE,AENJ8H,aHcKrJ,IAAL,CAAUJ,IAAV,AGdc,CHcCA,GGdf,CHcA,ACRmBwB,OAAOd,gBAAP,CAAwB,CAAxB,CAJR;AAKPkB,AFSR,AGZAiG,ACHI2B,eDGOjC,CCHC,GDGZ,CCHgBD,CDGC,MDGM9F,IENX,CAAgB3D,EFME6C,EENlB,EAAsBtC,IAAtB,CAA2BoM,OFMhB,CAAwB,CAAxB,CALR,GEDqC;AHehD,ACRI3I,AFSRjD,AGZI,ACHI4K,SJeH3K,GGZE0I,CHYP,ECDW,ADCA,CGZP,EAAS,EFWGnH,AGdAoK,EFMEhJ,EDQP,CAAU1B,IAAV,ACRciB,AENjB,CHckBF,IAAf,CAAP,WCRc,CAAyB,CAAzB,CANH;ADed,ACROiB,AFSJ,AGZI,ACHA2H,aJeC3L,MAAL,AGZW,GHYGe,CETC2C,CCHCnD,EHYhB,AIfkB,EDGP,CAAU,CDGC0C,CENlB,GDGsBgB,SAAf,EAA0BwF,EDGtB,CAAyB,CCH7B,CDGI,CAPJ,ACIgCrG,MAAhC,CAAuC4D,OAA9C;ADIA/C,AFSP,AGZI,ACHGuI,SDCJ,MAEO,ICHIC,IFMI/I,AENX,CAAY,MFMMV,OENlB,EAA2B,KAA3B,GFMW,CAAyB,EAAzB,CARJ;ADiBfA,ACRQkB,ACHA,ACHAsI,mBDGO,ACHAC,GHcGvK,CEXV,ACHA,CAAY,EHcpB,EAAwB,CCRCwB,KENjB,EFMwBd,AENA8J,UAAU1C,MFMjB,CAAwB,CENjB,CFMP,CATV,AEGP;AHeJ,ACRI7F,AFSR,AGZK,ACHA,SALO,CAAR,GHmBK7B,IAAL,CAAUxB,IAAV,CAAe,ECRE4C,GDQGnB,IAAL,ACRSU,GDQG,KAAKT,SCRf,CAAyB,EAAzB,CAVN,CDkBI,GAAkChD,mBAAjD;AACA,ACRI4E,AFSRpD,AGZC,ACHA,KATD,QHuBSsB,GDCGrB,CCDR,CAAUiB,IAAV,ADCJ,CCDmBA,CDCC,GCDhB,ACRmBwB,OAAOT,iBAAP,CAAyB,EAAzB,CAXR;AAYPoB,AFSJ,YAAGpD,SAAS,CAAZ,EAAe,CETEyC,OAAOT,iBAAP,CAAyB,EAAzB,CAZN;ADqBX,ACRIqB,AFSJ,AGZJ0F,ACHA,aJeS9J,ECDE,AEXA,KFWKoC,EDCZ,ECDO,CAAUT,ADCCZ,SCDX,EAAP,ADC6B9B,GETEuE,OAAOT,AFStC,iBET+B,CAAyB,EAAzB,CAbpB;ADsBd,ACROsB,AFSP,AGZG,ACHJiI,WAAOD,EAAP,CAAU,CDGC,KAAKhM,IAAL,CAAU,GCHrB,EDG0B0D,ACHAA,OFMOP,ECHtB,EAA0B/C,ECHE,CFMCiC,GCHpC,aDG6B,CAAwB,EAAxB;AAdlB,ACYd,ACHG,SFTA,GESG8I,KAAH,EAAU;AHedzI,ADCA,AIfQyI,kBAAM/B,IHcIzH,IAAlB,EAAwB,EGdhB,CAAmB+B,SAAnB;AHeJ,ACRAb,AFSJlC,AGZA,ACHK,SAFD,IHgBKoB,ECREkC,AFSArD,AIfA,EHcP,CAAUL,EDCd,CETI,CDQA,ADCc,CCDC,CCRCP,IDQIgC,ACRpB,IDQe,GAAY,KAAKC,cAAjB,GAAkChD,mBAAjD;AACA,ACRH,AFSG,AGZJyK,ACHQuC,YJeAjM,CCDC+B,IAAL,CAAUJ,CDCC,AIfAuK,GHcX,CAAevK,AGdX,CJeYjC,AIfA,GHchB,AEXmBwJ,GHYR,CAAYrI,AGZ3B,ACHQ,EDGqB,ACHA,EAAC+E,IJef,CAAqB,IIfG,GJexB,EAA8B,KAAKnG,MAAnC,AIfc,EJe8B,AIfnD,KJewDA,MAAL,IAAemB,KAA3D,CAAX;AGXA,ACHC,YDGEsI,IAAH,EAAS;AFYT,ACRJ,AFSI,AGZI,ACHP,KAND,UHoBW,ADCAlJ,IAAP,AGZW,CFWC+B,IAAL,AEXS/B,CFWCc,GEXN,CAAU,KFWd,AEXmB4C,EFW1B,OEXW,EAA0BwF,IAA1B,EAAgCrG,MAAhC,CAAuC0C,OAA9C;AFYP,ADCA,AGZI,SAFD,MAEO;AACH,ACHR,gBDGYoE,QAAQ,EAAZ;AFYRhH,ADCA,AGZQ,ACHRsJ,WAAOD,EAAP,CAAU,GDGE,IAAI3G,ACHhB,EHcmB1D,AGdA4H,EDGC,CAAZ,CFWR,CEXuBlE,CFWE7C,GEXE,ACHC,CHc5B,EAA+B,EEXCxC,IAAL,CAAU,KAAK0D,SAAf,EAA0BtD,MAA7C,EAAqDiF,GAArD,EAA0D;AFY9D,ADCJvE,AGZY6I,ACHR,aHcK5H,GDCG,CCDR,CAAUxB,IAAV,AEXc+E,CFWC,GEXP,CAAW,CFWCtD,IAAL,AEXShC,GFWG,CEXR,CAAU,GFWGiC,EEXEyB,SAAf,EAA0B2B,CFW9B,AEXI,EAA6BxC,CFWC5D,KEX9B,CAAoCsG,OAA/C,MFWR;AACA,ADCA,AGZK,YHYDxE,CCDCgB,IAAL,CAAUJ,EDCG,ECDb,CAAeA,EDCGhC,ECDlB,ODCY,GAAmB,KAAKD,MAAL,CAAYsB,WAAZ,CAAwB,KAAKvB,MAA7B,CAAnB,GAA0D,KAAKC,MAAL,CAAYuB,WAAZ,CAAwB,KAAKxB,MAA7B,CAAtE;AERJyE,AFSI,AGZI,aHYCzE,MAAL,AGZWkK,IHYI,CETC9H,AFShB,AGZI,GDGR,EAAyBgB,MAAzB,EAAiCK,kBAAjC,EAAqD;ADSjD,ACRA,ACHC,YDGGC,GDQG,KAAKpB,CCRC,GDQN,CAAUpB,ACRAiB,UDQV,CAAqBY,CCRf,CAAiBX,EDQvB,CAAP,ACRa,EAAsBqB,kBAAtB,EAA0C,KAAKjB,cAA/C,CAAb;ADSH,ACRG,AFSA,AGZH,YDGOjC,GFSGe,IETI,CFSX;AC5DW,ACoDPqC,AFSP,wBETmBD,OAAOR,kBAAP,CAA0B,CAA1B,EAA6B,CAA7B,CADL;AAEPU,ACHR,ACHI,YAAG8H,KAAH,CFMUhI,CENA,MFMOR,kBAAP,CAA0B,CAA1B,EAA6B,CAA7B,CAFC;ADWnBzD,ACRYsD,AFSR,AGZAoH,ACHQ,OHcLzK,OAAP,CAAeyC,CGdCwK,EFMEjJ,OAAOV,ACHA,EFWzB,GAA8Bb,CGdCuJ,MAAMzB,KHcrC,ACRkB,CAAyB,CAAzB,CAHC,cEHY,CAA6BH,KAA7B,CAAnB;AFOApF,AFSRjD,AGZI,ACHI,cJeE,CGZC,CCHCuF,GFMGtD,CCHCnD,IAAL,CAAU,CDGCyC,AENAoI,GAAGwB,CDGC3I,KCHJ,CAAU2H,GDGrB,EAA0B,ACHAC,EFMtB,CAAyB,CAAzB,CAJA,ACC2BpC,ECHV,CAAaiC,CDGlC,EAAqCtI,GCHG2G,GDGxC,CAA4ChE,MCHV,CAAiB+D,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","file":"index.map","sourceRoot":"..","sourcesContent":["const BIG_ENDIAN = 0\nconst LITTLE_ENDIAN = 1\nconst FILE_HEADER_SIZE = 24\nconst RADAR_DATA_SIZE = 2432\nconst CTM_HEADER_SIZE = 12\nconst MESSAGE_HEADER_SIZE = 28\n\nmodule.exports = { BIG_ENDIAN, LITTLE_ENDIAN, FILE_HEADER_SIZE, RADAR_DATA_SIZE, CTM_HEADER_SIZE, MESSAGE_HEADER_SIZE }","const fs = require('fs')\nconst { BIG_ENDIAN } = require('../constants')\n\n/**\n * Implementation for loading a file into the buffer\n * and seeking/reading the data at specific offsets\n */\nclass RandomAccessFile {\n    /**\n     * Returns a promise once the file has been\n     * loaded into the buffer\n     */\n    constructor(file) {\n        this.offset = 0\n        this.buffer = null\n        this.bigEndian = false\n\n        return new Promise(resolve => {\n            this.loadFile(file).then(data => {\n                this.buffer = Buffer.from(data, \"binary\")\n                resolve(this)\n            })\n        })\n    }\n\n    // return the current buffer length\n    getLength() {\n        return this.buffer.length\n    }\n\n    // load the file into the buffer\n    loadFile(file) {\n        return new Promise(resolve => {\n            fs.readFile(file, (error, data) => {\n                resolve(data)\n            })\n        })\n    }\n\n    // seek to a provided buffer offset\n    seek(byte) {\n        this.offset = byte\n    }\n\n    // set the binary endian order\n    endianOrder(endian) {\n        if(endian < 0) return\n        this.bigEndian = (endian === BIG_ENDIAN)\n    }\n\n    // read a string from the buffer\n    readString(bytes) {\n        let data = this.buffer.toString(\"utf-8\", this.offset, (this.offset += bytes))\n\n        return data\n    }\n\n    // read a float from the buffer\n    readFloat() {\n        let float = (this.bigEndian) ? this.buffer.readFloatBE(this.offset) : this.buffer.readFloatLE(this.offset)\n        this.offset += 4\n\n        return float\n    }\n\n    // read a number from the buffer\n    readInt() {\n        let int = (this.bigEndian) ? this.buffer.readIntBE(this.offset, 4) : this.buffer.readIntLE(this.offset, 4)\n        this.offset += 4\n\n        return int\n    }\n\n    // read a short from the buffer\n    readShort() {\n        let short = (this.bigEndian) ? this.buffer.readIntBE(this.offset, 2) : this.buffer.readIntLE(this.offset, 2)\n        this.offset += 2\n\n        return short\n    }\n\n    // read a byte from the buffer\n    readByte() {\n        return this.read()\n    }\n\n    // read a set number of bytes from the buffer\n    read(bytes = 1) {\n        let data = null\n        if(bytes > 1) {\n            data = this.buffer.slice(this.offset, bytes)\n            this.offset += bytes\n        } else {\n            data = this.buffer[this.offset]\n            this.offset++\n        }\n\n        return data\n    }\n\n    // skip a set number of bites and update the offset\n    skip(bytes) {\n        this.offset += bytes\n    }\n}\n\nmodule.exports.RandomAccessFile = RandomAccessFile","const { MESSAGE_HEADER_SIZE } = require('../constants')\n\nclass Level2Parser {\n    constructor(raf = null, dbp = null, offset = null) {\n        this._raf = raf\n        this._dbp = dbp\n        this._record_offset = offset\n    }\n\n    setRaf(raf) {\n        this._raf = raf\n    }\n\n    setDataBlockPointer(dbp) {\n        this._dbp = dbp\n    }\n\n    setRecordOffset(offset) {\n        this._record_offset = offset\n    }\n\n    getDataBlockByte(skip) {\n        this._raf.seek(this._dbp + this._record_offset + MESSAGE_HEADER_SIZE)\n        this._raf.skip(skip)\n\n        return this._raf.read()\n    }\n\n    getDataBlockInt(skip) {\n        this._raf.seek(this._dbp + this._record_offset + MESSAGE_HEADER_SIZE)\n        this._raf.skip(skip)\n\n        return this._raf.readInt()\n    }\n\n    getDataBlockBytes(skip, size) {\n        this._raf.seek(this._dbp + this._record_offset + MESSAGE_HEADER_SIZE)\n        this._raf.skip(skip)\n\n        return this._raf.read(size)\n    }\n\n    getDataBlockShort(skip) {\n        this._raf.seek(this._dbp + this._record_offset + MESSAGE_HEADER_SIZE)\n        this._raf.skip(skip)\n\n        return this._raf.readShort()\n    }\n\n    getDataBlockFloat(skip) {\n        this._raf.seek(this._dbp + this._record_offset + MESSAGE_HEADER_SIZE)\n        this._raf.skip(skip)\n\n        return this._raf.readFloat()\n    }\n\n    getDataBlockString(skip, size) {\n        this._raf.seek(this._dbp + this._record_offset + MESSAGE_HEADER_SIZE)\n        this._raf.skip(skip)\n\n        return this._raf.readString(size)\n    }\n}\n\nmodule.exports.Level2Parser = Level2Parser","const { Level2Parser } = require('./Level2Parser')\nconst { MESSAGE_HEADER_SIZE, FILE_HEADER_SIZE, RADAR_DATA_SIZE, CTM_HEADER_SIZE } = require('../constants')\n\n/**\n * Returns a record from the loaded radar data\n */\nclass Level2Record {\n    constructor(raf, record, message31_offset) {\n        this._record_offset = record * RADAR_DATA_SIZE + FILE_HEADER_SIZE + message31_offset\n\n        // passed the buffer, finished reading the file\n        if(this._record_offset >= raf.getLength()) return { finished: true }\n\n        // return the current record data\n        return this._getRecord(raf)\n    }\n\n    /**\n     * Creates a new parser and grabs the data\n     * from the data blocks. Then save that data\n     * to the record.volume Object\n     * See page 114; Section \"Data Block #1\" https://www.roc.noaa.gov/wsr88d/PublicDocs/ICDs/RDA_RPG_2620002P.pdf\n     */\n    _parseVolumeData(raf, record, data_block_pointer) {\n        let parser = new Level2Parser(raf, data_block_pointer, this._record_offset)\n        let data = {\n            block_type: parser.getDataBlockString(0, 1),\n            name: parser.getDataBlockString(1, 3),\n            size: parser.getDataBlockShort(4),\n            version_major: parser.getDataBlockByte(6),\n            version_miner: parser.getDataBlockByte(7),\n            latitude: parser.getDataBlockFloat(8),\n            longitude: parser.getDataBlockFloat(12),\n            elevation: parser.getDataBlockShort(16),\n            feedhorn_height: parser.getDataBlockByte(18),\n            calibration: parser.getDataBlockFloat(20),\n            tx_horizontal: parser.getDataBlockFloat(24),\n            tx_vertical: parser.getDataBlockFloat(28),\n            differential_reflectivity: parser.getDataBlockFloat(32),\n            volume_coverage_pattern: parser.getDataBlockByte(40)\n        }\n\n        record.volume = data\n    }\n\n    /**\n     * Creates a new parser and grabs the data\n     * from the data blocks. Then save that data\n     * to the record.elevation Object\n     * See page 114; Section \"Data Block #2\" https://www.roc.noaa.gov/wsr88d/PublicDocs/ICDs/RDA_RPG_2620002P.pdf\n     */\n    _parseElevationData(raf, record, data_block_pointer) {\n        let parser = new Level2Parser(raf, data_block_pointer, this._record_offset)\n        let data = {\n            block_type: parser.getDataBlockString(0, 1),\n            name: parser.getDataBlockString(1, 3),\n            size: parser.getDataBlockShort(4),\n            atmos: parser.getDataBlockShort(6),\n            calibration: parser.getDataBlockFloat(8)\n        }\n\n        record.elevation = data\n    }\n\n    /**\n     * Creates a new parser and grabs the data\n     * from the data blocks. Then save that data\n     * to the record.radial Object\n     * See page 115; Section \"Data Block #3\" https://www.roc.noaa.gov/wsr88d/PublicDocs/ICDs/RDA_RPG_2620002P.pdf\n     */\n    _parseRadialData(raf, record, data_block_pointer) {\n        let parser = new Level2Parser(raf, data_block_pointer, this._record_offset)\n        let data = {\n            block_type: parser.getDataBlockString(0, 1),\n            name: parser.getDataBlockString(1, 3),\n            size: parser.getDataBlockShort(4),\n            unambiguous_range: parser.getDataBlockShort(6),\n            horizontal_noise_level: parser.getDataBlockFloat(8),\n            vertical_noise_level: parser.getDataBlockFloat(12),\n            nyquist_velocity: parser.getDataBlockShort(16)\n        }\n\n        record.radial = data\n    }\n\n    /**\n     * Creates a new parser and grabs the data\n     * from the data blocks. Then save that data\n     * to the record.(reflect|velocity|spectrum|zdr|phi|rho)\n     * Object base on what type being parsed\n     * See page 115-117; Section \"Data Block #4-9\" https://www.roc.noaa.gov/wsr88d/PublicDocs/ICDs/RDA_RPG_2620002P.pdf\n     */\n    _parseMomentData(raf, record, data_block_pointer, type) {\n        if(data_block_pointer > 0) {\n            let parser = new Level2Parser(raf, data_block_pointer, this._record_offset)\n            let data = {\n                gate_count: parser.getDataBlockShort(8),\n                first_gate: parser.getDataBlockShort(10) / 1000, // scale int to float 0.001 precision\n                gate_size: parser.getDataBlockShort(12) / 1000, // scale int to float 0.001 precision\n                rf_threshold: parser.getDataBlockShort(14) / 10, // scale int to float 0.1 precision\n                snr_threshold: parser.getDataBlockShort(16) / 1000, // scale int to float 0.001 precision\n                data_size: parser.getDataBlockByte(19),\n                scale: parser.getDataBlockFloat(20),\n                offset: parser.getDataBlockFloat(24),\n                data_offset: data_block_pointer + 28,\n                moment_data: []\n            }\n            \n            switch(type) {\n                case 'REF':\n                    for(let i = 28; i <= 1867; i++) {\n                        data.moment_data.push((parser.getDataBlockByte(i) - data.offset) / data.scale)\n                    }\n                    record.reflect = data\n                    break\n                case 'VEL':\n                    for(let i = 28; i <= 1227; i++) {\n                        data.moment_data.push((parser.getDataBlockByte(i) - data.offset) / data.scale)\n                    }\n                    record.velocity = data\n                    break\n                case 'SW':\n                    for(let i = 28; i <= 1227; i++) {\n                        data.moment_data.push((parser.getDataBlockByte(i) - data.offset) / data.scale)\n                    }\n                    record.spectrum = data\n                    break\n                case 'ZDR':\n                    for(let i = 28; i <= 1227; i++) {\n                        data.moment_data.push((parser.getDataBlockByte(i) - data.offset) / data.scale)\n                    }\n                    record.zdr = data\n                    break\n                /* case 'PHI':  \n                    for(let i = 28; i <= 1227; i += 2) {\n                        data.moment_data.push((parser.getDataBlockShort(i) - data.offset) / data.scale)\n                    }\n                    record.phi = data\n                    break */\n                case 'RHO':\n                    // RHO - getting indexing errors - !!FIX!!\n                    for(let i = 28; i <= 1227; i++) {\n                        data.moment_data.push((parser.getDataBlockByte(i) - data.offset) / data.scale)\n                    }\n                    record.rho = data\n                    break\n            }\n        }\n    }\n\n    /**\n     * o--------------o-----------------------------o\n     * | Message type | Data                        |\n     * |--------------|-----------------------------|\n     * | 2            | RDA Status                  |\n     * | 3            | RDA Performance/Maintenance |\n     * | 5            | RDA Volume Coverage         |\n     * | 13           | Clutter Filter Bypass Map   |\n     * | 15           | Clutter Map                 |\n     * | 18           | RDA Adaptable Parameters    |\n     * | 29           | Model Data Message          |\n     * | 31           | Digital Radar Generic Format|\n     * o--------------o-----------------------------o\n     */\n    _getRecord(raf) {\n        raf.seek(this._record_offset)\n        raf.skip(CTM_HEADER_SIZE)\n\n        let message = {\n            message_size: raf.readShort(),\n            channel: raf.readByte(), \n            message_type: raf.readByte(),\n            id_sequence: raf.readShort(),\n            message_julian_date: raf.readShort(),\n            message_mseconds: raf.readInt(),\n            segment_count: raf.readShort(),\n            segment_number: raf.readShort()\n        }\n\n        if(message.message_type == 31) {\n            message.record = {\n                id: raf.readString(4),\n                mseconds: raf.readInt(),\n                julian_date: raf.readShort(),\n                radial_number: raf.readShort(),\n                azimuth: raf.readFloat(),\n                compress_idx: raf.readByte(),\n                sp: raf.readByte(),\n                radial_length: raf.readShort(),\n                ars: raf.readByte(),\n                rs: raf.readByte(),\n                elevation_number: raf.readByte(),\n                cut: raf.readByte(),\n                elevation: raf.readFloat(),\n                rsbs: raf.readByte(),\n                aim: raf.readByte(),\n                dcount: raf.readShort()\n            }\n\n            /**\n             * Read and save the data pointers from the file\n             * so we know where to start reading within the file\n             * to grab the data from the data blocks\n             * See page 114 of https://www.roc.noaa.gov/wsr88d/PublicDocs/ICDs/RDA_RPG_2620002P.pdf\n             */\n            let dbp1 = raf.readInt()\n            let dbp2 = raf.readInt()\n            let dbp3 = raf.readInt()\n            let dbp4 = raf.readInt()\n            let dbp5 = raf.readInt()\n            let dbp6 = raf.readInt()\n            let dbp7 = raf.readInt()\n            let dbp8 = raf.readInt()\n            let dbp9 = raf.readInt()\n\n            /**\n             * Parse all of our data inside the datablocks\n             * and save it to the message.record Object\n             */\n            this._parseVolumeData(raf, message.record, dbp1)\n            this._parseElevationData(raf, message.record, dbp2)\n            this._parseRadialData(raf, message.record, dbp3)\n            this._parseMomentData(raf, message.record, dbp4, 'REF')\n            this._parseMomentData(raf, message.record, dbp5, 'VEL')\n            this._parseMomentData(raf, message.record, dbp6, 'SW')\n            this._parseMomentData(raf, message.record, dbp7, 'ZDR')\n            this._parseMomentData(raf, message.record, dbp8, 'PHI')\n            this._parseMomentData(raf, message.record, dbp9, 'RHO')\n        }\n\n        if(message.message_type == 1) {\n\n            message.record = {\n                mseconds: raf.readInt(),\n                julian_date: raf.readShort(),\n                range: raf.readShort(),\n                azmith_angle: raf.readShort(),\n                radial_number: raf.readShort(),\n                radial_status: raf.readShort(),\n                elevation_angle: raf.readShort(),\n                elevation_number: raf.readShort(),\n                reflect_first_gate: raf.readShort(),\n                doppler_first_gate: raf.readShort(),\n                reflect_gate_size: raf.readShort(),\n                doppler_gate_size: raf.readShort(),\n                reflect_gate_count: raf.readShort(),\n                doppler_gate_count: raf.readShort(),\n                cut: raf.readShort(),\n                calibration: raf.readFloat(),\n                reflect_offset: raf.readShort(),\n                velocity_offset: raf.readShort(),\n                width_offset: raf.readShort(),\n                resolution: raf.readShort(),\n                vcp: raf.readShort()\n            }\n\n            raf.skip(14)\n\n            message.record.nyquist_vel = raf.readShort()\n            message.record.attenuation = raf.readShort()\n            message.record.threshold = raf.readShort()\n            message.record.has_reflection_data = message.record.reflect_gate_count > 0\n            message.record.has_doppler_data = message.record.doppler_gate_count > 0\n        }\n\n        return message\n    }\n}\n\nmodule.exports.Level2Record = Level2Record","const { RandomAccessFile } = require('./classes/RandomAccessFile')\nconst { Level2Record } = require('./classes/Level2Record')\nconst { BIG_ENDIAN, FILE_HEADER_SIZE } = require('./constants')\n\nclass Level2Radar {\n    constructor(file) {\n        this.elevation = 0\n        this.scan = 0\n        return new Promise(resolve => {\n            this.parseData(file).then(() => {\n                resolve(this)\n            })\n        })\n    }\n\n    setElevation(elevation) {\n        this.elevation = elevation - 1\n    }\n\n    setScan(scan) {\n        this.scan = scan - 1\n    }\n\n    setSweep(sweep) {\n        this.setScan(sweep)\n    }\n\n    getAzimuth(scan) {\n        if(scan) {\n            return this.data[this.elevation][scan].record.azimuth\n        } else {\n            return null\n        }\n    }\n\n    getScans() {\n        return this.data[this.elevation].length\n    }\n\n    // return reflectivity data for the current elevation and scan\n    getHighresReflectivity(scan) {\n        if(scan) {\n            return this.data[this.elevation][scan].record.reflect\n        } else {\n            let scans = []\n            for(let i = 0; i < this.data[this.elevation].length; i++) {\n                scans.push(this.data[this.elevation][i].record.reflect)\n            }\n            return scans\n        }\n    }\n\n    // return velocity data for the current elevation and scan\n    getHighresVelocity() {\n        return this.data[this.elevation][this.scan].record.velocity\n    }\n\n    // return spectrum data for the current elevation and scan\n    getHighresSpectrum() {\n        return this.data[this.elevation][this.scan].record.spectrum\n    }\n\n    // return diff reflectivity data for the current elevation and scan\n    getHighresDiffReflectivity() {\n        return this.data[this.elevation][this.scan].record.zdr\n    }\n\n    // return diff phase data for the current elevation and scan\n    getHighresDiffPhase() {\n        return this.data[this.elevation][this.scan].record.phi\n    }\n\n    // return correlation coefficient data for the current elevation and scan\n    getHighresCorrelationCoefficient() {\n        return this.data[this.elevation][this.scan].record.rho\n    }\n\n    /**\n     * Loads the file and parses the data.\n     * Returns a promise when completed\n     */\n    parseData(file) {\n        return new Promise(resolve => {\n            /**\n             * Load and access the radar archive file.\n             * The constructor for RandomAccessFile returns\n             * a promise. This allows for parsing the data\n             * after the file has been fully loaded into the\n             * buffer.\n             */\n            new RandomAccessFile(file).then(raf => {\n                let data = []\n\n                raf.endianOrder(BIG_ENDIAN) // Set binary ordering to Big Endian\n                raf.seek(FILE_HEADER_SIZE) // Jump to the bytes at 24, past the file header\n\n                let message_offset31 = 0 // the current message 31 offset\n                let recno = 0 // the record number\n\n                /**\n                 * Loop through all of the messages\n                 * contained within the radar archive file.\n                 * Save all the data we find to it's respective array\n                 */\n                while(true) {\n\n                    let r = new Level2Record(raf, recno++, message_offset31)\n\n                    if(r.finished) break // no more messages, exit the loop\n\n                    if(r.message_type === 31) {\n                        // found a message 31 type, update the offset\n                        message_offset31 = message_offset31 + (r.message_size * 2 + 12 - 2432)\n                    }\n\n                    // skip any messages that aren't type of 1 (generic radar data) or 31 (highres radar data)\n                    if(r.message_type != 1 && r.message_type != 31) continue\n\n                    // If data is found, push the record to the data array\n                    if(r.record.reflect)             data.push(r)\n                    if(r.record.velocity)            data.push(r)\n                    if(r.record.spectrum)            data.push(r)\n                    if(r.record.zdr)                 data.push(r)\n                    if(r.record.phi)                 data.push(r)\n                    if(r.record.rho)                 data.push(r)\n\n                }\n\n                // sort and group the scans by elevation asc\n                this.data = this.groupAndSortScans(data)\n\n                resolve(true)\n            })\n        })\n    }\n\n    /**\n     * This takes the scans (aka sweeps) and groups them\n     * by their elevation numbers. This allows switching\n     * between different elevations, if available.\n     */\n    groupAndSortScans(scans) {\n        let groups = []\n\n        // map the scans\n        scans.map(scan => {\n            let elevation_number = scan.record.elevation_number\n\n            /**\n             * If the group has already been created\n             * just push the current scan into the array\n             * or create a new group for the elevation\n             * NOTE: !! we need to convert the numbers to a \n             * string so that javascript doesn't freak out \n             * look into fixing !!\n             */\n            if(groups[elevation_number + '']) {\n                groups[elevation_number + ''].push(scan)\n            } else {\n                groups[elevation_number + ''] = [scan]\n            }\n        })\n\n        // Sort by elevation number ascending\n        groups = groups.sort((a, b) => {\n            let a_elevation = a[0].record.elevation_number\n            let b_elevation = b[0].record.elevation_number\n\n            if(a_elevation > b_elevation) return 1\n            if(a_elevation < b_elevation) return -1\n            return 0\n        })\n\n        return groups\n    }\n}\n\nmodule.exports.Level2Radar = Level2Radar","const express = require('express')\nconst app = express()\nconst http = require('http').Server(app)\nconst io = require('socket.io')(http)\nconst { Level2Radar } = require('../nexrad')\nimport * as tf from '@tensorflow/tfjs'\n\nlet radar = null\nlet fileLoading = false\n\nMath.radians = function(degrees) {\n    return degrees * Math.PI / 180\n}\n\napp.use('/', express.static(__dirname + '/public'))\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/public/index.html')\n})\n\nio.on('connection', client => {\n    // load and parse the radar file\n    client.on('loadFile', file => {\n        client.emit('fileLoading', true)\n        fileLoading = true\n        radar = new Level2Radar(file).then(radarData => {\n            radar = radarData\n            fileLoading = false\n            client.emit('fileLoading', false)\n            client.emit('setScans', radarData.getScans())\n        })\n    })\n\n    // set elevation for the scan\n    client.on('setElevation', elevation => {\n        if(radar) {\n            radar.setElevation(elevation)\n        } else {\n            client.emit('error', {message: 'No file loaded'})\n        }\n    })\n\n    // grab radar moment data for the current sweep\n    client.on('sweep', sweep => {\n        /**\n         * If we have a radar data file loaded we go ahead\n         * and do some calculations to plot the data to their\n         * x,y coordinates. We then emit that information to\n         * the client for plotting with THREE.js\n         */\n        if(radar) {\n            let reflectivity = radar.getHighresReflectivity(sweep)\n            let azimuth = tf.scalar(Math.radians(radar.getAzimuth(sweep)))\n\n            let range = tf.range(0, reflectivity.gate_count, 1)\n                .mul(tf.scalar(reflectivity.gate_size))\n                .add(tf.scalar(reflectivity.first_gate))\n\n            let x = range.mul(tf.sin(azimuth))\n            let y = range.mul(tf.cos(azimuth))\n\n            x.data().then(x => {\n                let coords = {x: JSON.stringify(x)}\n                y.data().then(y => {\n                    coords.y = JSON.stringify(y)\n                    let data = reflectivity.moment_data\n                    client.emit('plot', {coords, data})\n                })\n            })\n        } else {\n            client.emit('error', {message: 'No file loaded'})\n        }\n    })\n})\n\nhttp.listen(8080, () => {\n    console.log('Listening on *:8080')\n})"]}